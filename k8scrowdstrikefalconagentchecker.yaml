apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8scrowdstrikefalconagentchecker
spec:
  crd:
    spec:
      names:
        kind: K8sAzureV3NoPrivilegeEscalation
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            excludedContainers:
              type: array
              items:
                type: string
            excludedImages:
              description: >-
                Any container that uses an image that matches an entry in this list will be excluded
                from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)
                in order to avoid unexpectedly excluding images from an untrusted repository.
              type: array
              items:
                type: string
            requiredNamespace:
              type: string
              description: "Namespace where CrowdStrike Falcon DaemonSet should be running"
            requiredDaemonSet:
              type: string
              description: "Name of the CrowdStrike Falcon DaemonSet"
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequirecrowdstrikefalcon

        violation[{"msg": msg, "details": {}}] {
          required_ns := input.parameters.requiredNamespace
          required_ds := input.parameters.requiredDaemonSet

          # Exclusions
          c := input_containers[_]
          not input_container_excluded(c.name)
          not is_excluded(c)

          # Check if the required DaemonSet exists
          not daemonset_exists(required_ns, required_ds)
          msg := sprintf("CrowdStrike Falcon DaemonSet '%s' is required in namespace '%s' but is missing", [required_ds, required_ns])
        }

        daemonset_exists(ns, ds) {
          some i
          d := input.review.object.items[i]
          d.kind == "DaemonSet"
          d.metadata.namespace == ns
          d.metadata.name == ds
        }
